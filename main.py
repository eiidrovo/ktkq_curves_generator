import numpy as np
import pandas 
from intersect import intersection

def ktkq_1 (J,PD,AEAO,Z,kt_j2):
    #Para Raynolds menores a 2E6
    #J es un array con todos los J para calcular kt kq y nu
    #Coeficientes de kq
    sq=np.array([0,2,1,0,0,1,2,0,1,0,1,2,2,1,0,3,0,1,0,1,3,0,3,2,0,0,3,3,0,3,0,1,0,2,0,1,3,3,1,2,0,0,0,0,3,0,1])

    tq=np.array([0,0,1,2,1,1,1,2,0,1,1,1,0,1,2,0,3,3,0,0,0,1,1,2,3,6,0,3,6,0,6,0,2,3,6,1,2,6,0,0,2,6,0,3,3,6,6])

    uq=np.array([0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,2,2,0,0,0,1,1,2,2,2,2,0,0,0,1,1,1,1,2,2,2,2,2])

    vq=np.array([0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2])

    cq=np.array([0.0038,0.0089,-0.0322,0.0034,-0.0409,-0.1080,-0.0885,0.1886,-0.0037,0.0051,0.0209,0.0047,-0.0072,0.0044,-0.0269,0.0558,0.0162,0.0032,0.0159,0.0472,0.0196,-0.0503,-0.0301,0.0417,-0.0398,-0.0035,-0.0107,0.0011,-0.0003,0.0036,-0.0014,-0.0038,0.0127,-0.0032,0.0033,-0.0018,0.0001,0.0000,0.0003,0.0008,0.0016,0.0003,-0.0002,-0.0004,0.0001,-0.0005,0.0001])

    #Coeficientes de Kt
    sk=np.array([0,1,0,0,2,1,0,0,2,0,1,0,1,0,0,2,3,0,2,3,1,2,0,1,3,0,1,0,0,1,2,3,1,1,2,0,0,3,0])

    tk=np.array([0,0,1,2,0,1,2,0,0,1,1,0,0,3,6,6,0,0,0,0,6,6,3,3,3,3,0,2,0,0,0,0,2,6,6,0,3,6,3])

    uk=np.array([0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,1,2,2,2,2,2,0,0,0,1,2,2,0,0,0,0,0,0,0,1,1,1,2])

    vk=np.array([0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2])

    ck=np.array([0.008804960,-0.204554000,0.166351000,0.158114000,-0.147581000,-0.481497000,0.415437000,0.014404300,-0.053005400,0.014348100,0.060682600,-0.012589400,0.010968900,-0.133698000,0.006384070,-0.001327180,0.168496000,-0.050721400,0.085455900,-0.050447500,0.010465000,-0.006482720,-0.008417280,0.016842400,-0.001022960,-0.031779100,0.018604000,-0.004107980,-0.000606848,-0.004981900,0.002598300,-0.000560528,-0.001636520,-0.000328787,0.000116502,0.000690904,0.004217490,0.000056523,-0.001465640])

    kt=np.sum(ck*J**sk*PD**tk*AEAO**uk*Z**vk)
    kq=np.sum(cq*J**sq*PD**tq*AEAO**uq*Z**vq)
    nu=J/(2*np.pi)*(kt/kq)
    j2=kt_j2*J**2
    return(J,kt,kq,nu,j2)


def ktkq_2(J,PD,AEAO,Z,Re,kt_j2):
    #Para raynolds mayores a 2e6
    #Coeficientes de kq
    sq=np.array([0,2,1,0,0,1,2,0,1,0,1,2,2,1,0,3,0,1,0,1,3,0,3,2,0,0,3,3,0,3,0,1,0,2,0,1,3,3,1,2,0,0,0,0,3,0,1])

    tq=np.array([0,0,1,2,1,1,1,2,0,1,1,1,0,1,2,0,3,3,0,0,0,1,1,2,3,6,0,3,6,0,6,0,2,3,6,1,2,6,0,0,2,6,0,3,3,6,6])

    uq=np.array([0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,2,2,0,0,0,1,1,2,2,2,2,0,0,0,1,1,1,1,2,2,2,2,2])

    vq=np.array([0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2])

    cq=np.array([0.0038,0.0089,-0.0322,0.0034,-0.0409,-0.1080,-0.0885,0.1886,-0.0037,0.0051,0.0209,0.0047,-0.0072,0.0044,-0.0269,0.0558,0.0162,0.0032,0.0159,0.0472,0.0196,-0.0503,-0.0301,0.0417,-0.0398,-0.0035,-0.0107,0.0011,-0.0003,0.0036,-0.0014,-0.0038,0.0127,-0.0032,0.0033,-0.0018,0.0001,0.0000,0.0003,0.0008,0.0016,0.0003,-0.0002,-0.0004,0.0001,-0.0005,0.0001])

    #Coeficientes de Kt
    sk=np.array([0,1,0,0,2,1,0,0,2,0,1,0,1,0,0,2,3,0,2,3,1,2,0,1,3,0,1,0,0,1,2,3,1,1,2,0,0,3,0])

    tk=np.array([0,0,1,2,0,1,2,0,0,1,1,0,0,3,6,6,0,0,0,0,6,6,3,3,3,3,0,2,0,0,0,0,2,6,6,0,3,6,3])

    uk=np.array([0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,1,2,2,2,2,2,0,0,0,1,2,2,0,0,0,0,0,0,0,1,1,1,2])

    vk=np.array([0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2])

    ck=np.array([0.008804960,-0.204554000,0.166351000,0.158114000,-0.147581000,-0.481497000,0.415437000,0.014404300,-0.053005400,0.014348100,0.060682600,-0.012589400,0.010968900,-0.133698000,0.006384070,-0.001327180,0.168496000,-0.050721400,0.085455900,-0.050447500,0.010465000,-0.006482720,-0.008417280,0.016842400,-0.001022960,-0.031779100,0.018604000,-0.004107980,-0.000606848,-0.004981900,0.002598300,-0.000560528,-0.001636520,-0.000328787,0.000116502,0.000690904,0.004217490,0.000056523,-0.001465640])

    kt=np.sum(ck*J**sk*PD**tk*AEAO**uk*Z**vk)
    kq=np.sum(cq*J**sq*PD**tq*AEAO**uq*Z**vq)

    dkt=0.000353485-0.00333758*(AEAO)*J**2-0.00478125*AEAO*PD*J+0.000257792*(np.log10(Re)-0.301)**2*AEAO*J**2+0.00000643192*(np.log10(Re)-0.301)*PD**6*J**2-0.0000110636*(np.log10(Re)-0.301)**2*PD**6*J**2-0.0000276305*(np.log10(Re)-0.301)**2*Z*AEAO*J**2+0.0000954*(np.log10(Re)-0.301)*Z*AEAO*PD*J+0.0000032049*(np.log10(Re)-0.301)*Z**2*AEAO*PD**3*J

    dkq=-0.000591412+0.00696898*PD-0.0000666654*Z*PD**6+0.0160818*AEAO**2-0.000938091*(np.log10(Re)-0.301)*PD-0.00059593*(np.log10(Re)-0.301)*PD**2+0.0000782099*(np.log10(Re)-0.301)**2*PD**2+0.0000052199*(np.log10(Re)-0.301)*Z*AEAO*J**2-0.00000088528*(np.log10(Re)-0.301)**2*Z*AEAO*PD*J+0.0000230171*(np.log10(Re)-0.301)**2*Z*AEAO*PD*J+0.0000230171*(np.log10(Re)-0.301)*Z*PD**6-0.00000184341*(np.log10(Re)-0.301)**2*Z*PD**6-0.00400252*(np.log10(Re)-0.301)*AEAO**2+0.000220915*(np.log10(Re)-0.301)**2*AEAO**2

    kt=kt+dkt
    kq=kq+dkq
    nu=J/(2*np.pi)*(kt/kq)
    j2=kt_j2*J**2
    return(J,kt,kq,nu,j2)

np.set_printoptions(precision=4)

T=536936.006904582 #[N]
rho=1025 #[kg/m3]
D=4.656 #[m]
Va=4.14284 #[m/s]
kt_over_j2=T/(rho*D**2*Va**2)
RE= 410321036.9
Z=np.arange(2,8)
AEAO=np.array([0.30,0.35,0.40,0.45,0.50,0.55,0.60,0.65,0.70,0.75,0.80,0.85,0.90,1.0,1.05])
J=np.linspace(0,1.50,50)
PD=np.linspace(0.5,1.40,10)

for z in Z:
    file=open('{} blades//operative.txt'.format(z),'w')
    output=['aeao,pd,jop,ktop,kqop,nuop\n']
    for aeao in AEAO:      
        for pd in PD:
            pd=np.round(pd,2)
            result=[] #(J, Kt, Kq, nu, kt_j2)
            for j in J:
                result.append(list(ktkq_2(j,pd,aeao,z,RE,kt_over_j2)))

            result=np.array(result)
            df=pandas.DataFrame(result)
            df=df[df[1]>=0]

            jdf=df[0]
            ktdf=df[1]
            kqdf=df[2]
            nudf=df[3]
            ktjdf=df[4]

            a, b = intersection(jdf, ktdf, jdf, ktjdf)
            jop=a[0]
            ktop=b[0]
            kqop=np.interp(jop,jdf,kqdf)
            nuop=np.interp(jop,jdf,nudf)

            to_append="{},{},{},{},{},{}\n".format(aeao,pd,jop,ktop,kqop,nuop)
            output.append(to_append)

            df.to_excel('{} blades//AEAO {} PD {}.xlsx'.format(z,aeao,pd),index=False,header=['J', 'Kt', 'Kq', 'nu', 'kt_j2'])

    file.writelines(output)
    file.close

